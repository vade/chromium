This is a testharness.js-based test.
PASS createDataChannel required arguments 
PASS createDataChannel with closed connection 
FAIL createDataChannel defaults assert_equals: maxPacketLifeTime expected (object) null but got (undefined) undefined
PASS createDataChannel with label "foo" 
PASS createDataChannel with label null 
PASS createDataChannel with label undefined 
PASS createDataChannel with label lone surrogate 
PASS createDataChannel with ordered false 
PASS createDataChannel with ordered null/undefined 
FAIL createDataChannel with maxPacketLifeTime 0 assert_equals: expected (number) 0 but got (undefined) undefined
PASS createDataChannel with maxRetransmits 0 
FAIL createDataChannel with both maxPacketLifeTime and maxRetransmits assert_throws: function "() => pc.createDataChannel('', {
    maxPacketLifeTime: 0,
    maxRetransmits: 0
  })" did not throw
PASS createDataChannel with protocol "foo" 
PASS createDataChannel with protocol null 
PASS createDataChannel with protocol undefined 
PASS createDataChannel with protocol lone surrogate 
PASS createDataChannel with negotiated true 
PASS createDataChannel with id -1 
PASS createDataChannel with id 0 
PASS createDataChannel with id 1 
PASS createDataChannel with id 65534 
FAIL createDataChannel with id 65535 assert_throws: function "() => pc.createDataChannel('', { id: id })" did not throw
PASS createDataChannel with id 65536 
FAIL createDataChannel with priority "high" assert_equals: expected (string) "high" but got (undefined) undefined
Harness: the test ran to completion.

