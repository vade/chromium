This is a testharness.js-based test.
FAIL Errors must be propagated forward: starts errored; preventAbort = false; fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = false; rejected abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = undefined (falsy); fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = null (falsy); fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = false (falsy); fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = 0 (falsy); fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = -0 (falsy); fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = NaN (falsy); fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort =  (falsy); fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = true (truthy) rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = a (truthy) rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = 1 (truthy) rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = Symbol() (truthy) rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = [object Object] (truthy) rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = true, preventCancel = true rs.pipeTo is not a function
FAIL Errors must be propagated forward: starts errored; preventAbort = true, preventCancel = true, preventClose = true rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored while empty; preventAbort = false; fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored while empty; preventAbort = false; rejected abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored while empty; preventAbort = true rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored while empty; dest never desires chunks; preventAbort = false; fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored while empty; dest never desires chunks; preventAbort = false; rejected abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored while empty; dest never desires chunks; preventAbort = true rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored after one chunk; preventAbort = false; fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored after one chunk; preventAbort = false; rejected abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored after one chunk; preventAbort = true rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored after one chunk; dest never desires chunks; preventAbort = false; fulfilled abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored after one chunk; dest never desires chunks; preventAbort = false; rejected abort promise rs.pipeTo is not a function
FAIL Errors must be propagated forward: becomes errored after one chunk; dest never desires chunks; preventAbort = true rs.pipeTo is not a function
FAIL Errors must be propagated forward: shutdown must not occur until the final write completes rs.pipeTo is not a function
Harness: the test ran to completion.

